// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using postgis.Infrastructures.Context;

#nullable disable

namespace postgis.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("postgis.Models.City", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("postgis.Models.LocationPoint", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<Point>("Location")
                        .HasColumnType("geometry");

                    b.HasKey("ID");

                    b.HasIndex("CityId");

                    b.ToTable("LocationPoints");
                });

            modelBuilder.Entity("postgis.Models.LocationPolygon", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<Polygon>("Location")
                        .HasColumnType("geometry");

                    b.HasKey("ID");

                    b.HasIndex("CityId");

                    b.ToTable("LocationPolygons");
                });

            modelBuilder.Entity("postgis.Models.LocationPolyLine", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<LineString>("LineString")
                        .HasColumnType("geometry");

                    b.HasKey("ID");

                    b.HasIndex("CityId");

                    b.ToTable("LocationPolyLines");
                });

            modelBuilder.Entity("postgis.Models.LocationPoint", b =>
                {
                    b.HasOne("postgis.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("postgis.Models.LocationPolygon", b =>
                {
                    b.HasOne("postgis.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("postgis.Models.LocationPolyLine", b =>
                {
                    b.HasOne("postgis.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });
#pragma warning restore 612, 618
        }
    }
}
